"""
Django settings for newspaper project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'modeltranslation',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    'django_apscheduler',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'news.apps.NewsConfig',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.locale.LocaleMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'basic.middlewares.TimezoneMiddleware',
]

ROOT_URLCONF = 'newspaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'newspaper.context_processors.current_time',
                'newspaper.context_processors.timezones',
                'news.context_processors.all_posts',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


WSGI_APPLICATION = 'newspaper.wsgi.application'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': BASE_DIR / 'cache_files'
    }
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Russian'),
]

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Asia/Almaty'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Application settings

# django
SITE_ID = 1

LOGIN_URL = '/accounts/login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

ADMINS = (
    ('exspa', os.environ.get('EMAIL')),
)

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('PASSWORD_API')
EMAIL_USE_SSL = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEFAULT_FROM_EMAIL = os.environ.get('EMAIL')

# allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'none'  # 'mandatory', 'optional', 'none'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_FORMS = {'signup': 'accounts.forms.BasicSignupForm'}

SOCIALACCOUNT_AUTO_SIGNUP = False
SOCIALACCOUNT_FORMS = {'signup': 'accounts.forms.BasicSocialSignupForm'}

# apscheduler
APSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # seconds

# celery
# CELERY_BROKER_URL = f"redis://localhost:6379"
# CELERY_RESULT_BACKEND = f"redis://localhost:6379"

CELERY_BROKER_URL = f"redis://{os.environ.get('USERNAME_REDIS')}:{os.environ.get('PASSWORD_REDIS')}@{os.environ.get('ENDPOINT')}"
CELERY_RESULT_BACKEND = f"redis://{os.environ.get('USERNAME_REDIS')}:{os.environ.get('PASSWORD_REDIS')}@{os.environ.get('ENDPOINT')}"

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# custom
DAILY_POST_LIMIT = 333
SITE_URL = 'http://127.0.0.1:8000/'


# Logging
LOG_DIR = BASE_DIR / 'logs'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'filter_info_level': {
            '()': 'logging_formatter.log_middleware.FilterLevels',
            'filter_levels': ['INFO'],
        },
        'filter_warning_level': {
            '()': 'logging_formatter.log_middleware.FilterLevels',
            'filter_levels': ['WARNING'],
        },
        'filter_error_level': {
            '()': 'logging_formatter.log_middleware.FilterLevels',
            'filter_levels': ['ERROR'],
        },
    },

    'formatters': {
        'debug_format': {
            'format': '{asctime} | {levelname} | {message}',
            'style': '{',
        },
        'info_format': {
            'format': '{asctime} | {levelname} | {module} | {message}',
            'style': '{',
        },
        'warning_format': {
            'format': '{asctime} | {levelname} | {message} | {pathname}',
            'style': '{',
        },
        'error_format': {
            'format': '{asctime} | {levelname} | {message} | {pathname} | {exc_info}',
            'style': '{',
        },
    },

    'handlers': {
        'console_info': {
            'level': 'INFO',
            'filters': ['filter_info_level', 'require_debug_true', ],
            'class': 'logging.StreamHandler',
            'formatter': 'info_format',
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['filter_warning_level', 'require_debug_true', ],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_format',
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['filter_error_level', 'require_debug_true', ],
            'class': 'logging.StreamHandler',
            'formatter': 'error_format',
        },
        'file_info': {
            'level': 'INFO',
            'filters': ['require_debug_false', ],
            'class': 'logging.FileHandler',
            'formatter': 'info_format',
            'filename': LOG_DIR / 'general.log',
        },
        'file_error': {
            'level': 'ERROR',
            'filters': ['require_debug_false', ],
            'class': 'logging.FileHandler',
            'formatter': 'error_format',
            'filename': LOG_DIR / 'errors.log',
        },
        'file_security': {
            'level': 'DEBUG',
            'filters': ['require_debug_false', ],
            'class': 'logging.FileHandler',
            'formatter': 'info_format',
            'filename': LOG_DIR / 'security.log',
        },
        'mail_error': {
            'level': 'ERROR',
            'filters': ['require_debug_false', ],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'error_format',
        },
    },

    'loggers': {
        'django': {
            'handlers': [
                'console_info',
                'console_warning',
                'console_error',
                'file_info',
            ],
            'level': 'INFO'
        },
        'django.request': {
            'handlers': ['file_error', 'mail_error', ],
            'level': 'ERROR',
        },
        'django.template': {
            'handlers': ['file_error', ],
            'level': 'ERROR',
        },
        'django.db.backends': {
            'handlers': ['file_error', ],
            'level': 'ERROR',
        },
        'django.security': {
            'handlers': ['file_security', ],
            'level': 'DEBUG',
        },
    },
}
